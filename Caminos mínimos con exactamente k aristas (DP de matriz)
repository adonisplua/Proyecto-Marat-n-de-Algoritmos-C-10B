#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int shortestPathKEdges(vector<vector<int>>& graph, int u, int v, int k){
    int V=graph.size();
    vector<vector<vector<int>>> dp(V, vector<vector<int>>(V, vector<int>(k+1,INT_MAX)));
    for(int i=0;i<V;i++)
        dp[i][i][0]=0;
    for(int e=1;e<=k;e++)
        for(int i=0;i<V;i++)
            for(int j=0;j<V;j++)
                for(int a=0;a<V;a++)
                    if(graph[a][j]!=INT_MAX && dp[i][a][e-1]!=INT_MAX)
                        dp[i][j][e]=min(dp[i][j][e], dp[i][a][e-1]+graph[a][j]);
    return dp[u][v][k];
}

int main(){
    const int INF=INT_MAX;
    vector<vector<int>> graph={
        {0,10,3,INF},
        {INF,0,INF,2},
        {INF,INF,0,1},
        {INF,INF,INF,0}};
    cout<<"Camino más corto con 3 aristas (0→3): "<<shortestPathKEdges(graph,0,3,3)<<endl;
    return 0;
}
