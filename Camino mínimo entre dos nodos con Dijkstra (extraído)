#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

int dijkstraPath(vector<vector<pair<int,int>>>& adj, int src, int dest){
    int n=adj.size();
    vector<int> dist(n,INT_MAX);
    dist[src]=0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push({0,src});

    while(!pq.empty()){
        int d=pq.top().first, u=pq.top().second;
        pq.pop();
        if(u==dest) return d;
        for(auto [v,w]: adj[u]){
            if(dist[v]>d+w){
                dist[v]=d+w;
                pq.push({dist[v],v});
            }
        }
    }
    return -1;
}

int main(){
    int n=5;
    vector<vector<pair<int,int>>> adj(n);
    adj[0]={{1,10},{4,5}};
    adj[1]={{2,1},{4,2}};
    adj[2]={{3,4}};
    adj[3]={{2,6},{0,7}};
    adj[4]={{1,3},{2,9},{3,2}};
    cout<<"Camino mínimo 0→3: "<<dijkstraPath(adj,0,3)<<endl;
    return 0;
}
