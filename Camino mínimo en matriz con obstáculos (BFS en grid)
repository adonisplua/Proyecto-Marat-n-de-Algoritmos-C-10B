#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int shortestPathGrid(vector<vector<int>>& grid){
    int m=grid.size(), n=grid[0].size();
    vector<vector<int>> dist(m, vector<int>(n,-1));
    queue<pair<int,int>> q;
    if(grid[0][0]==1) return -1;
    dist[0][0]=0; q.push({0,0});
    int dirs[4][2]={{1,0},{-1,0},{0,1},{0,-1}};
    while(!q.empty()){
        auto [x,y]=q.front(); q.pop();
        for(auto &d:dirs){
            int nx=x+d[0], ny=y+d[1];
            if(nx>=0&&ny>=0&&nx<m&&ny<n&&grid[nx][ny]==0&&dist[nx][ny]==-1){
                dist[nx][ny]=dist[x][y]+1;
                q.push({nx,ny});
            }
        }
    }
    return dist[m-1][n-1];
}

int main(){
    vector<vector<int>> grid={{0,0,0},{1,1,0},{0,0,0}};
    cout<<"Camino mÃ­nimo: "<<shortestPathGrid(grid)<<endl;
    return 0;
}
