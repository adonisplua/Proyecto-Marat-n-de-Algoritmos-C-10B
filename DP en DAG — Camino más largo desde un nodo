#include <iostream>
#include <vector>
#include <stack>
#include <climits>
using namespace std;

void topoDFS(int v, vector<vector<int>>& adj, vector<bool>& vis, stack<int>& st){
    vis[v]=true;
    for(int u: adj[v])
        if(!vis[u]) topoDFS(u,adj,vis,st);
    st.push(v);
}

void longestPath(vector<vector<int>>& adj, int s){
    int n=adj.size();
    stack<int> st;
    vector<bool> vis(n,false);
    for(int i=0;i<n;i++)
        if(!vis[i]) topoDFS(i,adj,vis,st);

    vector<int> dist(n,INT_MIN);
    dist[s]=0;

    while(!st.empty()){
        int u=st.top(); st.pop();
        if(dist[u]!=INT_MIN)
            for(int v: adj[u])
                dist[v]=max(dist[v], dist[u]+1);
    }

    cout<<"Distancia mÃ¡s larga desde "<<s<<":\n";
    for(int i=0;i<n;i++)
        cout<<i<<": "<<(dist[i]==INT_MIN?-1:dist[i])<<"\n";
}

int main(){
    vector<vector<int>> adj={{1,2},{3},{3},{}};
    longestPath(adj,0);
    return 0;
}
