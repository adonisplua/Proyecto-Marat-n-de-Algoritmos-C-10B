#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

bool bfs(vector<vector<int>>& rGraph, int s, int t, vector<int>& parent){
    int n=rGraph.size();
    vector<bool> vis(n,false);
    queue<int> q;
    q.push(s); vis[s]=true;
    parent[s]=-1;
    while(!q.empty()){
        int u=q.front(); q.pop();
        for(int v=0;v<n;v++){
            if(!vis[v] && rGraph[u][v]>0){
                parent[v]=u;
                vis[v]=true;
                if(v==t) return true;
                q.push(v);
            }
        }
    }
    return false;
}

int edmondsKarp(vector<vector<int>>& graph, int s, int t){
    int n=graph.size();
    vector<vector<int>> rGraph=graph;
    vector<int> parent(n);
    int maxFlow=0;
    while(bfs(rGraph,s,t,parent)){
        int pathFlow=INT_MAX;
        for(int v=t;v!=s;v=parent[v])
            pathFlow=min(pathFlow, rGraph[parent[v]][v]);
        for(int v=t;v!=s;v=parent[v]){
            int u=parent[v];
            rGraph[u][v]-=pathFlow;
            rGraph[v][u]+=pathFlow;
        }
        maxFlow+=pathFlow;
    }
    return maxFlow;
}

int main(){
    vector<vector<int>> graph={{0,16,13,0,0,0},
                               {0,0,10,12,0,0},
                               {0,4,0,0,14,0},
                               {0,0,9,0,0,20},
                               {0,0,0,7,0,4},
                               {0,0,0,0,0,0}};
    cout<<"Flujo mÃ¡ximo: "<<edmondsKarp(graph,0,5)<<endl;
    return 0;
}
