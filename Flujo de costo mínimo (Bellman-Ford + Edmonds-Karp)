#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

struct Edge { int to, cap, cost, rev; };

void addEdge(vector<vector<Edge>>& g, int u, int v, int cap, int cost){
    g[u].push_back({v,cap,cost,(int)g[v].size()});
    g[v].push_back({u,0,-cost,(int)g[u].size()-1});
}

pair<int,int> minCostMaxFlow(vector<vector<Edge>>& g, int s, int t){
    int n=g.size(), flow=0, cost=0;
    vector<int> dist(n), parent(n), parentEdge(n);

    while(true){
        fill(dist.begin(), dist.end(), INT_MAX);
        dist[s]=0;
        queue<int> q; q.push(s);
        vector<bool> inq(n,false); inq[s]=true;

        while(!q.empty()){
            int u=q.front(); q.pop(); inq[u]=false;
            for(int i=0;i<g[u].size();i++){
                Edge &e=g[u][i];
                if(e.cap>0 && dist[u]+e.cost<dist[e.to]){
                    dist[e.to]=dist[u]+e.cost;
                    parent[e.to]=u; parentEdge[e.to]=i;
                    if(!inq[e.to]){inq[e.to]=true; q.push(e.to);}
                }
            }
        }

        if(dist[t]==INT_MAX) break;
        int f=INT_MAX;
        for(int v=t; v!=s; v=parent[v])
            f=min(f,g[parent[v]][parentEdge[v]].cap);
        for(int v=t; v!=s; v=parent[v]){
            Edge &e=g[parent[v]][parentEdge[v]];
            e.cap-=f;
            g[v][e.rev].cap+=f;
            cost+=f*e.cost;
        }
        flow+=f;
    }
    return {flow,cost};
}

int main(){
    int n=4;
    vector<vector<Edge>> g(n);
    addEdge(g,0,1,2,1);
    addEdge(g,0,2,1,2);
    addEdge(g,1,3,1,3);
    addEdge(g,2,3,2,1);
    auto [flow,cost]=minCostMaxFlow(g,0,3);
    cout<<"Flujo máximo="<<flow<<" Costo mínimo="<<cost<<endl;
    return 0;
}
