#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int timerA=0;
void dfsArtic(int v, int p, vector<vector<int>>& adj, vector<int>& tin, vector<int>& low, vector<bool>& vis, vector<bool>& isArt){
    vis[v]=true;
    tin[v]=low[v]=++timerA;
    int children=0;
    for(int u: adj[v]){
        if(u==p) continue;
        if(vis[u])
            low[v]=min(low[v], tin[u]);
        else{
            dfsArtic(u,v,adj,tin,low,vis,isArt);
            low[v]=min(low[v], low[u]);
            if(low[u]>=tin[v] && p!=-1)
                isArt[v]=true;
            children++;
        }
    }
    if(p==-1 && children>1) isArt[v]=true;
}

void articulationPoints(vector<vector<int>>& adj){
    int n=adj.size();
    vector<int> tin(n,-1), low(n,-1);
    vector<bool> vis(n,false), isArt(n,false);
    for(int i=0;i<n;i++)
        if(!vis[i]) dfsArtic(i,-1,adj,tin,low,vis,isArt);

    cout<<"Puntos de articulaciÃ³n: ";
    for(int i=0;i<n;i++)
        if(isArt[i]) cout<<i<<" ";
    cout<<endl;
}

int main(){
    vector<vector<int>> adj={{1,2},{0,2},{0,1,3,5},{2,4},{3},{2,6,7},{5,7},{5,6}};
    articulationPoints(adj);
    return 0;
}
