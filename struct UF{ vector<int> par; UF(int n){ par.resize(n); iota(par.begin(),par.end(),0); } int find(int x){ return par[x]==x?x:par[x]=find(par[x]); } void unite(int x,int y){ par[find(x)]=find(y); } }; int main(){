#include <bits/stdc++.h>
using namespace std;
struct Edge{ int u,v,w; };
struct UF{ vector<int> par; UF(int n){ par.resize(n); iota(par.begin(),par.end(),0); } int find(int x){ return par[x]==x?x:par[x]=find(par[x]); } void unite(int x,int y){ par[find(x)]=find(y); } };
int main(){
    int n=4;
    vector<Edge> edges={{0,1,1},{1,2,2},{0,2,4},{2,3,3}};
    sort(edges.begin(),edges.end(),[](Edge &a, Edge &b){ return a.w<b.w; });
    UF uf(n); int cost=0;
    for(auto &e:edges){ if(uf.find(e.u)!=uf.find(e.v)){ uf.unite(e.u,e.v); cost+=e.w; } }
    cout<<"Costo MST: "<<cost<<"\n";
}
