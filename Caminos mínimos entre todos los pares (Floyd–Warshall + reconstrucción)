#include <iostream>
#include <vector>
#include <climits>
using namespace std;

void floydPath(vector<vector<int>>& dist){
    int n=dist.size();
    vector<vector<int>> next(n, vector<int>(n,-1));
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            if(dist[i][j]!=INT_MAX) next[i][j]=j;

    for(int k=0;k<n;k++)
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(dist[i][k]!=INT_MAX && dist[k][j]!=INT_MAX && dist[i][j]>dist[i][k]+dist[k][j]){
                    dist[i][j]=dist[i][k]+dist[k][j];
                    next[i][j]=next[i][k];
                }

    cout<<"Caminos mÃ­nimos:\n";
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(dist[i][j]==INT_MAX) cout<<"INF ";
            else cout<<dist[i][j]<<" ";
        }
        cout<<endl;
    }
}

int main(){
    const int INF=INT_MAX;
    vector<vector<int>> dist={
        {0,3,INF,7},
        {8,0,2,INF},
        {5,INF,0,1},
        {2,INF,INF,0}};
    floydPath(dist);
    return 0;
}
