#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Edge { int u,v,w; };
int find(int x, vector<int>& parent) {
    if(parent[x]!=x) parent[x]=find(parent[x],parent);
    return parent[x];
}

int main() {
    int n=4;
    vector<Edge> edges = {{0,1,10},{0,2,6},{0,3,5},{1,3,15},{2,3,4}};
    sort(edges.begin(), edges.end(), [](Edge a, Edge b){ return a.w<b.w; });

    vector<int> parent(n);
    for(int i=0;i<n;i++) parent[i]=i;

    int cost=0;
    vector<Edge> mst;
    for(auto e:edges){
        int pu=find(e.u,parent), pv=find(e.v,parent);
        if(pu!=pv){
            parent[pu]=pv;
            cost+=e.w;
            mst.push_back(e);
        }
    }

    cout << "Costo MST: " << cost << endl;
    for(auto e:mst) cout << e.u << "-" << e.v << " (" << e.w << ")\n";
    return 0;
}
