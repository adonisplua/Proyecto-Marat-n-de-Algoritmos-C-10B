#include <iostream>
#include <vector>
using namespace std;

bool hamiltonianUtil(vector<vector<int>>& adj, vector<int>& path, vector<bool>& vis, int pos){
    if(pos==adj.size()){
        return find(adj[path[pos-1]].begin(),adj[path[pos-1]].end(),path[0])!=adj[path[pos-1]].end();
    }
    for(int v=1; v<adj.size(); v++){
        if(!vis[v] && find(adj[path[pos-1]].begin(),adj[path[pos-1]].end(),v)!=adj[path[pos-1]].end()){
            path[pos]=v;
            vis[v]=true;
            if(hamiltonianUtil(adj,path,vis,pos+1)) return true;
            vis[v]=false;
        }
    }
    return false;
}

bool hamiltonianCycle(vector<vector<int>>& adj){
    int n=adj.size();
    vector<int> path(n,-1);
    vector<bool> vis(n,false);
    path[0]=0; vis[0]=true;
    return hamiltonianUtil(adj,path,vis,1);
}

int main(){
    vector<vector<int>> adj={{1,3},{0,2,3},{1,3},{0,1,2}};
    cout<<"¿Tiene ciclo Hamiltoniano? "<<(hamiltonianCycle(adj)?"Sí":"No")<<endl;
    return 0;
}
