#include <iostream>
#include <vector>
#include <climits>
using namespace std;

bool dfs(int u, int t, vector<vector<int>>& rGraph, vector<int>& parent, vector<bool>& vis){
    vis[u]=true;
    if(u==t) return true;
    for(int v=0; v<rGraph.size(); v++){
        if(!vis[v] && rGraph[u][v]>0){
            parent[v]=u;
            if(dfs(v,t,rGraph,parent,vis)) return true;
        }
    }
    return false;
}

int fordFulkerson(vector<vector<int>>& graph, int s, int t){
    int n=graph.size();
    vector<vector<int>> rGraph=graph;
    vector<int> parent(n);
    int maxFlow=0;

    while(true){
        vector<bool> vis(n,false);
        if(!dfs(s,t,rGraph,parent,vis)) break;

        int pathFlow=INT_MAX;
        for(int v=t; v!=s; v=parent[v])
            pathFlow=min(pathFlow, rGraph[parent[v]][v]);

        for(int v=t; v!=s; v=parent[v]){
            int u=parent[v];
            rGraph[u][v]-=pathFlow;
            rGraph[v][u]+=pathFlow;
        }

        maxFlow+=pathFlow;
    }
    return maxFlow;
}

int main(){
    vector<vector<int>> graph={
        {0,8,0,0,3,0},
        {0,0,9,0,0,0},
        {0,0,0,0,7,2},
        {0,0,0,0,0,5},
        {0,0,7,4,0,0},
        {0,0,0,0,0,0}};
    cout<<"Flujo mÃ¡ximo: "<<fordFulkerson(graph,0,5)<<endl;
    return 0;
}
