#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Job{int start, end, profit;};

bool cmp(Job a, Job b){return a.end<b.end;}

int binarySearch(vector<Job>& jobs, int i){
    int lo=0, hi=i-1;
    while(lo<=hi){
        int mid=(lo+hi)/2;
        if(jobs[mid].end<=jobs[i].start){
            if(jobs[mid+1].end<=jobs[i].start) lo=mid+1;
            else return mid;
        }else hi=mid-1;
    }
    return -1;
}

int jobScheduling(vector<Job>& jobs){
    sort(jobs.begin(), jobs.end(), cmp);
    int n=jobs.size();
    vector<int> dp(n);
    dp[0]=jobs[0].profit;
    for(int i=1;i<n;i++){
        int incl=jobs[i].profit;
        int l=binarySearch(jobs,i);
        if(l!=-1) incl+=dp[l];
        dp[i]=max(incl, dp[i-1]);
    }
    return dp[n-1];
}

int main(){
    vector<Job> jobs={{1,3,50},{3,5,20},{6,19,100},{2,100,200}};
    cout<<"MÃ¡ximo beneficio: "<<jobScheduling(jobs)<<endl;
    return 0;
}
