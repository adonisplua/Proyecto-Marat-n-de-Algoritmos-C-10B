#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

void dijkstra(vector<vector<pair<int,int>>>& adj, int start){
    int n=adj.size();
    vector<int> dist(n,INT_MAX);
    dist[start]=0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push({0,start});

    while(!pq.empty()){
        int d=pq.top().first;
        int u=pq.top().second;
        pq.pop();
        if(d>dist[u]) continue;
        for(auto [v,w]: adj[u]){
            if(dist[v]>dist[u]+w){
                dist[v]=dist[u]+w;
                pq.push({dist[v],v});
            }
        }
    }

    cout<<"Distancias desde "<<start<<": ";
    for(int i=0;i<n;i++) cout<<dist[i]<<" ";
    cout<<endl;
}

int main(){
    int n=5;
    vector<vector<pair<int,int>>> adj(n);
    adj[0]={{1,2},{2,4}};
    adj[1]={{2,1},{3,7}};
    adj[2]={{4,3}};
    adj[3]={{4,1}};
    adj[4]={};
    dijkstra(adj,0);
    return 0;
}
